# 日時を取得_開始時刻
+get_time_1:
  action>: GetTime
  display_name>: 日時を取得_開始時刻
  format: YYYY-MM-DD HH:mm:ss.SSS
  timezone: Asia/Tokyo
  relativeTime: ''
  private: false
  meta:
    action:
      disabled: false
    disabled: false

# zap連携で受け取った各種データを保存
+store_value_14:
  action>: StoreValue
  display_name>: 変数に保存_zapから受け取ったId
  key: mailId
  value: "${mail_Id}"
  setIfNotDefined: false
  private: false
  meta:
    action:
      disabled: false

# 変数に保存_zapから受け取った宛先（AirWorkのみ）
+store_value_15:
  action>: StoreValue
  display_name>: 変数に保存_zapから受け取った宛先（AirWorkのみ）
  key: mailTo
  value: "${mailTo}"
  setIfNotDefined: false
  private: false
  meta:
    action:
      disabled: false

# 変数に保存_zapから受け取った本文
+store_value_13:
  action>: StoreValue
  display_name>: 変数に保存_zapから受け取った本文
  key: mailBody
  value: "${mailBody}"
  setIfNotDefined: false
  private: false
  meta:
    action:
      disabled: false

# 応募IDを本文から抽出
+store_value_8:
  action>: StoreValue
  display_name>: 変数に保存_応募ID抽出
  key: OuboId
  value: "${mailBody.match(/応募ID[^\\d]*(\\d{3,})/)[1]}"
  setIfNotDefined: false
  private: false
  meta:
    action:
      disabled: false

# Salesforce連携用初期化
+store_value_9:
  action>: StoreValue
  display_name>: SFクエリ用の初期化
  key: kyujinRecord
  value: "${parseInt(0)}"
  setIfNotDefined: false
  private: false
  meta:
    action:
      disabled: false

# 変数に保存_adRecord初期化
+store_value_10:
  action>: StoreValue
  display_name>: 変数に保存_adRecord初期化
  key: adRecord
  value: "${parseInt(0)}"
  setIfNotDefined: false
  private: false
  meta:
    action:
      disabled: false

# 変数に保存_sfObj初期化
+store_value_11:
  action>: StoreValue
  display_name>: 変数に保存_sfObj初期化
  key: sfObj
  value: ''
  setIfNotDefined: false
  private: false
  meta:
    action:
      disabled: false

# エラー処理開始
+try_1:
  try>:
    display_name>: エラー処理開始
    errorObjectName: err
    private: false
  meta:
    action:
      disabled: false
  _do:

    # IDPWを取得
    +run_script_1:
      action>: RunScript
      display_name>: IDPWを取得
      code: |
        const idpws = [
          { id: "upthemark_bluecollar", pw: "baseupp@123", mail: "entry@baseupp.com" },
          { id: "upthemark_bluecollar", pw: "baseupp@123", mail: "info@baseupp.com" }
        ];
        const mailToList = [mailTo];
        const result = idpws.find(el => mailToList.includes(el.mail));
        return result;
      private: false
      meta:
        action:
          disabled: false

    # 変数に保存
    +store_value_1:
      action>: StoreValue
      display_name>: 変数に保存_IDPW
      key: idpw
      value: "+run_script_1"
      setIfNotDefined: false
      private: false
      meta:
        action:
          disabled: false

    # ログイン
    +open_browser_1:
      action>: OpenBrowser
      display_name>: Bluecollarログイン
      url: https://bluecollar.jp/manage/login
      lang: ja-JP
      headless: true
      confirm: true
      useShadowDomSelector: false
      private: false
      meta:
        action:
          disabled: false

    # ID入力
    +type_text_1:
      action>: TypeText
      display_name>: ログインID入力
      browser: "+open_browser_1"
      selector: "#loginid"
      text: "${idpw.id}"
      clearValue: false
      ignoreError: true
      private: false
      meta:
        action:
          disabled: false

    # パスワード入力
    +type_password_1:
      action>: TypePassword
      display_name>: パスワード入力
      browser: "+type_text_1"
      selector: "#password"
      password: "********"
      ignoreError: true
      private: false
      meta:
        action:
          disabled: false

    # ログインボタンクリック
    +click_1:
      action>: Click
      display_name>: ログイン実行
      browser: "+type_password_1"
      selector: "#login"
      confirm: true
      waitAfter: 1000
      ignoreError: true
      timeout: 30000
      private: false
      meta:
        action:
          disabled: false

    # 応募一覧へ遷移
    +go_to_1:
      action>: GoTo
      display_name>: 応募一覧へ遷移
      browser: "+click_1"
      url: https://bluecollar.jp/manage/secure/application/list
      private: false
      meta:
        action:
          disabled: false

    # 応募IDの詳細ページへ直接遷移（置き換え推奨）
    +inject_script_2:
      action>: InjectScript
      display_name>: 応募IDの詳細ページへ遷移
      browser: "+go_to_1"
      code: |
        (() => {
          try {
            const ouboId = "${OuboId}";
            const rows = document.querySelectorAll("tbody tr");

            for (const row of rows) {
              const cells = row.querySelectorAll("td");
              if (cells.length < 3) continue;

              const ouboIdCell = cells[2];
              if (ouboIdCell && ouboIdCell.textContent.trim() === ouboId) {
                // 応募IDと一致する行が見つかった

                // 行内のリンク（idパラメータ付き）を探す
                const link = row.querySelector(
                  "a[href*='/manage/secure/application/update?id=']"
                );
                if (link && link.href) {
                  window.location.href = link.href;
                  return;
                } else {
                  throw new Error("応募IDの行にリンクが見つかりません");
                }
              }
            }

            throw new Error("応募IDが見つかりませんでした: " + ouboId);
          } catch (err) {
            console.error("エラー:", err);
            throw err;
          }
        })();
      returnValue: false
      private: false
      meta:
        action:
          disabled: false

    # 応募情報抽出（修正済み InjectScript）
    +inject_get_entry_info:
      action>: InjectScript
      display_name>: 応募情報取得
      browser: "+go_to_1"
      code: |
        (() => {
          function getTextByLabel(label) {
            const labelEls = Array.from(document.querySelectorAll(".row.mgt10"));
            for (const el of labelEls) {
              const labelTextEl = el.querySelector(".col-md-3");
              const valueTextEl = el.querySelector(".col-md-9");
              const labelText = labelTextEl ? labelTextEl.innerText.trim() : "";
              const valueText = valueTextEl ? valueTextEl.innerText.trim() : "";
              if (labelText === label) return valueText || "";
            }
            return "";
          }

          // 応募日＋時刻を取得する関数
          function getFullAppliedDateTime() {
            const el = document.querySelector(".media-heading .col-md-4");
            if (!el) return "";
            const match = el.innerText.match(
              /応募日\s*(\d{4}\/\d{1,2}\/\d{1,2} \d{2}:\d{2}:\d{2})/
            );
            if (!match) return "";
            const dt = match[1]; // e.g. "2025/10/22 14:09:52"
            const [datePart, timePart] = dt.split(" ");
            const [y, m, d] = datePart.split("/");
            return (
              y +
              "-" +
              ("0" + m).slice(-2) +
              "-" +
              ("0" + d).slice(-2) +
              "T" +
              timePart +
              "+0900"
            );
          }

          const ouboId = "${OuboId}";
          const nameRaw = document.querySelector(
            ".media-body .row:nth-child(1) .col-md-8"
          );
          const name = nameRaw ? nameRaw.textContent.trim() : "";
          const nameParts = name.split(/[\s　]+/);
          const sei = nameParts[0] || "";
          const mei = nameParts[1] || "";

          const ageStr = getTextByLabel("年齢").replace(/[^\d]/g, "");
          const age = parseInt(ageStr, 10);

          const field7 =
            "年齢：" +
            getTextByLabel("年齢") +
            "\n" +
            "応募機器：" +
            getTextByLabel("応募機器") +
            "\n" +
            "応募内容：" +
            getTextByLabel("応募内容") +
            "\n" +
            "経験年数：" +
            getTextByLabel("経験年数") +
            "\n" +
            "保有資格数：" +
            getTextByLabel("保有資格数") +
            "\n" +
            "保有資格について：" +
            getTextByLabel("保有資格について") +
            "\n" +
            "希望連絡時間：" +
            getTextByLabel("希望連絡時間") +
            "\n" +
            "自己PR：" +
            getTextByLabel("自己PR");

          return {
            sf: {
              Field1__c: sei,
              Field2__c: mei,
              Field20__c: isNaN(age) ? null : age,
              Field5__c: getTextByLabel("連絡のつく電話番号"),
              Field6__c: getTextByLabel("メールアドレス"),
              State__c: getTextByLabel("お住いの都道府県"),
              City__c: getTextByLabel("お住いの市区町村"),
              Field7__c: field7,
              Field8__c: getFullAppliedDateTime(), // 日付＋時刻
              Field19__c: "",
              Field25__c: "BaseUpp",
              Field45__c: "本社",
              RecordTypeId: "0127F000000KJofQAG",
              Field10__c: "0017F00002T9bnqQAB",
              Field17__c: "ブルカラ",
              Field9__c: "WEB",
              SendEntryMail__c: true
            },
            nameHasNotBlank: !(sei && mei)
          };
        })();
      waitBefore: 2000
      returnValue: true
      private: false
      meta:
        action:
          disabled: false

    # 応募情報を保存
    +store_value_2:
      action>: StoreValue
      display_name>: 応募情報を保存
      key: sfObj
      value: "+inject_get_entry_info"
      setIfNotDefined: false
      private: false
      meta:
        action:
          disabled: false

    # テキストを取得
    +get_text_1:
      action>: GetText
      display_name>: テキストを取得
      browser: "+inject_script_2"
      selector: p:nth-of-type(2) a
      ignoreError: true
      private: false
      meta:
        action:
          disabled: false

    # 変数に保存
    +store_value_4:
      action>: StoreValue
      display_name>: 変数に保存
      key: jobId
      value: "+get_text_1"
      setIfNotDefined: false
      private: false
      meta:
        action:
          disabled: false

    # テキストを作成
    +text_1:
      action>: Text
      display_name>: テキストを作成
      text: https://bluecollar.jp/manage/preview/${jobId}
      private: false
      meta:
        action:
          disabled: false

    # 変数に保存
    +store_value_6:
      action>: StoreValue
      display_name>: 変数に保存
      key: JobUrl
      value: "+text_1"
      setIfNotDefined: false
      private: false
      meta:
        action:
          disabled: false

    # 取得したURLに遷移
    +go_to_job_preview:
      action>: GoTo
      display_name>: 応募求人のプレビューURLへ遷移
      browser: "+go_to_1"
      url: "${JobUrl}"
      private: false
      meta:
        action:
          disabled: false

    # スクリーンショットを撮る
    +take_screenshot_1:
      action>: TakeScreenshot
      display_name>: スクリーンショットを撮る
      browser: "+go_to_1"
      full_page: false
      type: png
      private: false
      meta:
        action:
          disabled: false

    # ページ内でJavaScriptを実行する
    +inject_script_1:
      action>: InjectScript
      display_name>: ページ内でJavaScriptを実行する
      browser: "+go_to_job_preview"
      code: |
        (() => {
          const rows = document.querySelectorAll("tr");
          for (const row of rows) {
            const th = row.querySelector("th");
            if (th && th.textContent.trim() === "求人No.") {
              const td = row.querySelector("td");
              return td ? td.textContent.trim() : null;
            }
          }
          return null;
        })();
      returnValue: true
      private: false
      meta:
        action:
          disabled: false

    # 変数に保存
    +store_value_7:
      action>: StoreValue
      display_name>: 変数に保存
      key: JobNumber
      value: "+inject_script_1"
      setIfNotDefined: false
      private: false
      meta:
        action:
          disabled: false

    # ブラウザを閉じる
    +close_browser_1:
      action>: CloseBrowser
      display_name>: ブラウザを閉じる
      browser: "+open_browser_1"
      private: false
      meta:
        action:
          disabled: false

    # Salesforce求人クエリ
    +salesforce_query_1:
      action>: SalesforceQuery
      display_name>: Salesforce求人クエリ
      provider: sfdc_5d1544566cbf9f61b0d2
      query: |
        SELECT Id, job_number__c, Name, Field1743__c, ChargeOfBase__c
        FROM JobOffer__c
        WHERE job_number__c = '${JobNumber}'
        LIMIT 1
      private: false
      meta:
        display:
          provider:
            type: chip
            label: Salesforce (y_itasaka@upthemark.com)
            icon: salesforce
        action:
          disabled: false

    # 求人情報を保存
    +store_value_3:
      action>: StoreValue
      display_name>: 求人情報を保存
      key: kyujinRecord
      value: "+salesforce_query_1"
      setIfNotDefined: false
      private: false
      meta:
        action:
          disabled: false

    # 求人情報上書き
    +run_script_2:
      action>: RunScript
      display_name>: Salesforce項目上書き
      code: |
        sfObj.sf.Field19__c = kyujinRecord[0].Id;
        sfObj.sf.Field45__c = kyujinRecord[0].Field1743__c;
        sfObj.sf.Field25__c = kyujinRecord[0].ChargeOfBase__c;
        sfObj.sf.SendEntryMail__c = true;
        return sfObj;
      private: false
      meta:
        action:
          disabled: false

    # 上書き後sfObjを保存
    +store_value_5:
      action>: StoreValue
      display_name>: 上書き後sfObjを保存
      key: sfObj
      value: "+run_script_2"
      setIfNotDefined: false
      private: false
      meta:
        action:
          disabled: false

    # Salesforce登録
    +salesforce_create_record_1:
      action>: SalesforceCreateRecord
      display_name>: 応募レコード作成
      provider: sfdc_5d1544566cbf9f61b0d2
      object: Entry__c
      data: "${sfObj.sf}"
      private: false
      meta:
        display:
          provider:
            type: chip
            label: Salesforce (y_itasaka@upthemark.com)
            icon: salesforce
        action:
          disabled: false

    # LastId更新
    +data_store_save_1:
      action>: DataStoreSave
      display_name>: LastId更新
      key: lastId_AIRWORK
      value: "${mailId}"
      private: false
      meta:
        action:
          disabled: false

# 日時を取得_終了時刻
+get_time_2:
  action>: GetTime
  display_name>: 日時を取得_終了時刻
  format: YYYY-MM-DD HH:mm:ss.SSS
  timezone: Asia/Tokyo
  relativeTime: ''
  private: false
  meta:
    action:
      disabled: false